/**
 * B-G431B-ESC1 position motion control example with encoder
 *
 */
#include <Arduino.h>
#include <SimpleFOC.h>
// #define CURRENT_SENSING_ACTIVE 1
// Motor instance
BLDCMotor motor = BLDCMotor(7);
BLDCDriver6PWM driver = BLDCDriver6PWM(A_PHASE_UH, A_PHASE_UL, A_PHASE_VH, A_PHASE_VL, A_PHASE_WH, A_PHASE_WL);
#ifdef CURRENT_SENSING_ACTIVE
LowsideCurrentSense currentSense = LowsideCurrentSense(0.003f, -64.0f / 7.0f, A_OP1_OUT, A_OP2_OUT, A_OP3_OUT);
#endif
// encoder instance
// Encoder encoder = Encoder(A_HALL2, A_HALL3, 2048, A_HALL1);
// MagneticSensorI2C as5600 = MagneticSensorI2C(AS5600_I2C);

// Interrupt routine intialisation
// channel A and B callbacks
// void doA(){encoder.handleA();}
// void doB(){encoder.handleB();}
// void doIndex(){encoder.handleIndex();}

float target_velocity = 0;
// instantiate the commander
Commander command = Commander(Serial);
void doTarget(char *cmd)
{
  command.scalar(&target_velocity, cmd);
}
float map_float(float x, float in_min, float in_max, float out_min, float out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

void setup()
{
  pinMode(A_POTENTIOMETER, INPUT_ANALOG);
  // initialize encoder sensor hardware
  // encoder.init();
  // encoder.enableInterrupts(doA, doB);
  // as5600.init();

  // link the motor to the sensor
  // motor.linkSensor(&encoder);
  // motor.linkSensor(&as5600);
  // driver config
  // power supply voltage [V]
  driver.voltage_power_supply = 12;
  driver.init();
  // link the motor and the driver
  motor.linkDriver(&driver);
#ifdef CURRENT_SENSING_ACTIVE
  // link current sense and the driver
  currentSense.linkDriver(&driver);

  // current sensing
  currentSense.init();
  // no need for aligning
  currentSense.skip_align = true;
  motor.linkCurrentSense(&currentSense);
#endif
  // aligning voltage [V]
  motor.voltage_sensor_align = 3;
  // index search velocity [rad/s]
  motor.velocity_index_search = 3;

  motor.foc_modulation = FOCModulationType::SpaceVectorPWM;
  // set motion control loop to be used
  motor.controller = MotionControlType::velocity_openloop;

  // contoller configuration
  // default parameters in defaults.h

  // velocity PI controller parameters
  motor.PID_velocity.P = 0.2;
  motor.PID_velocity.I = 20;
  motor.PID_velocity.D = 0.0;
  // default voltage_power_supply
  motor.voltage_limit = 6;
  motor.current_limit = 1;
  // jerk control using voltage voltage ramp
  // default value is 300 volts per sec  ~ 0.3V per millisecond
  motor.PID_velocity.output_ramp = 1000;

  // velocity low pass filtering time constant
  motor.LPF_velocity.Tf = 0.01;

  // angle P controller
  motor.P_angle.P = 20;
  //  maximal velocity of the position control
  motor.velocity_limit = 50;

  // use monitoring with serial
  Serial.begin(115200);
  // comment out if not needed
  motor.useMonitoring(Serial);

  // initialize motor
  motor.init();
  // align encoder and start FOC
  motor.initFOC();

  // add target command T
  command.add('T', doTarget, "target angle");

  Serial.println(F("Motor ready."));
  Serial.println(F("Set the target angle using serial terminal:"));
  _delay(1000);
}

void loop()
{
  // main FOC algorithm function
  motor.loopFOC();

  // Motion control function
  target_velocity = map(10 * analogRead(A_POTENTIOMETER), 0, 10230, 0, 300) / 10.0;
  Serial.printf("target_velocity:%.2f\n", target_velocity);
  // Serial.printf("analogRead:%d\n", analogRead(A_POTENTIOMETER));
  motor.move(target_velocity);
  // function intended to be used with serial plotter to monitor motor variables
  // significantly slowing the execution down!!!!
  // motor.monitor();

  // user communication

  // command.run();
  
}